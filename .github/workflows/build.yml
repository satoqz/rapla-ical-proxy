name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  BIN: rapla-ical-proxy

jobs:
  compile-binary:
    strategy:
      matrix:
        arch: [aarch64, x86_64]

    runs-on: ubuntu-latest

    env:
      RUST_TARGET: ${{ matrix.arch }}-unknown-linux-musl
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Zig
        uses: mlugg/setup-zig@8d6198c65fb0feaa111df26e6b467fea8345e46f # v2.0.5

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1 # v2.8.1

      - name: Set up Rust toolchain
        run: rustup target add '${{ env.RUST_TARGET }}'

      - name: Set up cargo-zigbuild
        run: |
          gh release download \
            --repo rust-cross/cargo-zigbuild \
            -p '*.x86_64-unknown-linux-musl.tar.gz' \
            -O - | tar xzf - -C /usr/local/bin
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Build
        run: cargo zigbuild --locked --release --target '${{ env.RUST_TARGET }}'

      - name: Rename binary
        run: |
          mv \
            'target/${{ env.RUST_TARGET }}/release/${{ env.BIN }}' \
            'target/${{ env.RUST_TARGET }}/release/${{ env.BIN }}.${{ env.RUST_TARGET }}'

      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: ${{ env.BIN }}.${{ env.RUST_TARGET }}
          path: target/${{ env.RUST_TARGET }}/release/${{ env.BIN }}.${{ env.RUST_TARGET }}

  container-image:
    needs: compile-binary
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Download artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v4.8.1
        with:
          path: bin
          pattern: ${{ env.BIN }}.*
          merge-multiple: true

      - name: Rename & chmod binaries
        working-directory: bin
        run: |
          mv '${{ env.BIN }}'.aarch64* '${{ env.BIN }}.arm64'
          mv '${{ env.BIN }}'.x86_64* '${{ env.BIN }}.amd64'
          chmod +x '${{ env.BIN }}'.*

      - name: Extract container image metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=
            type=sha,prefix=,format=long
        id: meta

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Log into registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name != 'pull_request'

      - name: Build and push container image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          file: Dockerfile
          context: bin
          platforms: linux/arm64,linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
